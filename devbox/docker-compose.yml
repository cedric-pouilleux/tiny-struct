version: "3.8"

services:
  nuxt-app-dev:
    build:
      context: ..
      dockerfile: devbox/Dockerfile.dev
    ports:
      - "3000:3000"
    volumes:
      - ../app:/app
      - /app/node_modules
      - ./env/.env.development:/app/.env
    env_file:
      - ./env/.env.${ENV}
    depends_on:
      database:
        condition: service_healthy
    networks:
      - app_network
    entrypoint: ["/bin/sh", "-c", "pnpm dev"]
    profiles:
      - development

  nuxt-app:
    image: ${NUXT_IMAGE:-miomnz/nuxt_app:latest}
    ports:
      - "${NUXT_PORT}:3000"
    depends_on:
      database:
        condition: service_healthy
    env_file:
      - ./env/.env.${ENV}
    networks:
      - app_network
    profiles:
      - production
      - integration

  database:
    image: postgres:15
    restart: always
    volumes:
      - "pg_data_${ENV}:/var/lib/postgresql/data"
      - ../app/server/db/migrations:/docker-entrypoint-initdb.d
    ports:
      - "${DB_PORT}:5432"
    env_file:
      - ./env/.env.${ENV}
    networks:
      - app_network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      interval: 10s
      timeout: 5s
      retries: 5

  nginx:
    image: nginx:latest
    restart: always
    ports:
      - "${NGINX_PORT:-8080}:80"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
    depends_on:
      - nuxt-app
    networks:
      - app_network
    profiles:
      - production
      - integration

networks:
  app_network:
    driver: bridge

volumes:
  pg_data_production:
  pg_data_development:
  pg_data_integration:
